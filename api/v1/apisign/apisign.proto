syntax = "proto3";

package api.v1.apisign;
import "google/api/annotations.proto"; // http 路由规则包
import "protoc-gen-openapiv2/options/annotations.proto";// swagger proto 包 path third_party
import "validate/validate.proto";// validate proto 数据校验规则包

option go_package = "ghub/api/v1/apisign;apisign";
option java_multiple_files = true;
option java_package = "api.v1.apisign";

service Apisign {
	//例子：/api/v1/get-sign?name=李先后&id=12&time_stamp=1654756018&nonce_str=s1231sdfsdhfwerwe&appid=1231231abc&sign=05d7e4b9cbfe26b037421cd228089c67
	rpc ApisignGetDemo (SignRequest) returns (SignReply){
		option (google.api.http) = {//主要作用定义http 路由
			get: "/api/v1/get-sign",//访问接口路由
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "接口签名get demo";// 备注
			summary: "接口签名get demo";// 标题
			tags: "apisign";// 分类
		};
	};

	//例子：/api/v1/get-sign?name=李先后&id=12&time_stamp=1654756018&nonce_str=s1231sdfsdhfwerwe&appid=1231231abc
	rpc CreateSignDemo (CreateSignRequest) returns (CreateSignReply){
		option (google.api.http) = {//主要作用定义http 路由
			get: "/api/v1/create-sign",//访问接口路由
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "生成签名";// 备注
			summary: "生成签名";// 标题
			tags: "apisign";// 分类
		};
	};

	//生成token
	rpc CreateTokenDemo (CreateTokenRequest) returns (CreateTokenReply){
		option (google.api.http) = {//主要作用定义http 路由
			get: "/api/v1/create-token",//访问接口路由
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "生成token";// 备注
			summary: "生成token";// 标题
			tags: "apisign";// 分类
		};
	};
}

message SignRequest{
	option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			required: [ "name","id"]
		},
	};
	// @gotags: form:"id" uri:"id"
	int32 id = 1[
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
			description: "用户id"
		},
		(validate.rules).int32={
			gt:10,
			ignore_empty:true
		}
	];
	// @gotags: form:"id" uri:"id"
	string name = 2[
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
			description: "姓名"
		},
		(validate.rules).string = {
			max_len:5,// 限制内容最大长度
			min_len:2,// 限制内容最短长度
		}
	];
}

message SignReply{
	int32 id = 1;
	string name = 2;
}

//例子：/api/v1/get-sign?name=李先后&id=12&time_stamp=1654756018&nonce_str=s1231sdfsdhfwerwe&appid=1231231abc
message CreateSignRequest{
	option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
		json_schema: {
			required: [ "appid","nonce_str","time_stamp"]
		}
	};
	// @gotags: form:"appid" uri:"appid"
	string appid = 1[
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
			description: "appid"
		},
		(validate.rules).string={
			min_len:5
		}
	];
	// @gotags: form:"nonce_str" uri:"nonce_str"
	string nonce_str = 2[
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
			description: "随机字符串"
		},
		(validate.rules).string = {
			min_len:5,// 限制内容最短长度
		}
	];
	// @gotags: form:"time_stamp" uri:"time_stamp"
	int64 time_stamp = 3[
		(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
			description: "时间戳"
		}
	];
}

message CreateSignReply{
	string sign = 1;
}

message CreateTokenRequest{
}

message CreateTokenReply{
	string token = 1;
}