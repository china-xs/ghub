// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/apidemo/apidemo.proto

package apidemo

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SignRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignRequestMultiError, or
// nil if none found.
func (m *SignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != 0 {

		if m.GetId() <= 10 {
			err := SignRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 5 {
		err := SignRequestValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 5 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignRequestMultiError(errors)
	}

	return nil
}

// SignRequestMultiError is an error wrapping multiple validation errors
// returned by SignRequest.ValidateAll() if the designated constraints aren't met.
type SignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignRequestMultiError) AllErrors() []error { return m }

// SignRequestValidationError is the validation error returned by
// SignRequest.Validate if the designated constraints aren't met.
type SignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignRequestValidationError) ErrorName() string { return "SignRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignRequestValidationError{}

// Validate checks the field values on SignReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignReplyMultiError, or nil
// if none found.
func (m *SignReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SignReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return SignReplyMultiError(errors)
	}

	return nil
}

// SignReplyMultiError is an error wrapping multiple validation errors returned
// by SignReply.ValidateAll() if the designated constraints aren't met.
type SignReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignReplyMultiError) AllErrors() []error { return m }

// SignReplyValidationError is the validation error returned by
// SignReply.Validate if the designated constraints aren't met.
type SignReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignReplyValidationError) ErrorName() string { return "SignReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignReplyValidationError{}

// Validate checks the field values on CreateSignRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSignRequestMultiError, or nil if none found.
func (m *CreateSignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppid()) < 5 {
		err := CreateSignRequestValidationError{
			field:  "Appid",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNonceStr()) < 5 {
		err := CreateSignRequestValidationError{
			field:  "NonceStr",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TimeStamp

	if len(errors) > 0 {
		return CreateSignRequestMultiError(errors)
	}

	return nil
}

// CreateSignRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSignRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSignRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSignRequestMultiError) AllErrors() []error { return m }

// CreateSignRequestValidationError is the validation error returned by
// CreateSignRequest.Validate if the designated constraints aren't met.
type CreateSignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSignRequestValidationError) ErrorName() string {
	return "CreateSignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSignRequestValidationError{}

// Validate checks the field values on CreateSignReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSignReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSignReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSignReplyMultiError, or nil if none found.
func (m *CreateSignReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSignReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sign

	if len(errors) > 0 {
		return CreateSignReplyMultiError(errors)
	}

	return nil
}

// CreateSignReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSignReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSignReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSignReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSignReplyMultiError) AllErrors() []error { return m }

// CreateSignReplyValidationError is the validation error returned by
// CreateSignReply.Validate if the designated constraints aren't met.
type CreateSignReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSignReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSignReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSignReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSignReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSignReplyValidationError) ErrorName() string { return "CreateSignReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateSignReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSignReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSignReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSignReplyValidationError{}

// Validate checks the field values on CreateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenRequestMultiError, or nil if none found.
func (m *CreateTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateTokenRequestMultiError(errors)
	}

	return nil
}

// CreateTokenRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenRequestMultiError) AllErrors() []error { return m }

// CreateTokenRequestValidationError is the validation error returned by
// CreateTokenRequest.Validate if the designated constraints aren't met.
type CreateTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenRequestValidationError) ErrorName() string {
	return "CreateTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenRequestValidationError{}

// Validate checks the field values on CreateTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenReplyMultiError, or nil if none found.
func (m *CreateTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return CreateTokenReplyMultiError(errors)
	}

	return nil
}

// CreateTokenReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTokenReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenReplyMultiError) AllErrors() []error { return m }

// CreateTokenReplyValidationError is the validation error returned by
// CreateTokenReply.Validate if the designated constraints aren't met.
type CreateTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenReplyValidationError) ErrorName() string { return "CreateTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenReplyValidationError{}

// Validate checks the field values on GetTokenInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTokenInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenInfoRequestMultiError, or nil if none found.
func (m *GetTokenInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTokenInfoRequestMultiError(errors)
	}

	return nil
}

// GetTokenInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetTokenInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTokenInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenInfoRequestMultiError) AllErrors() []error { return m }

// GetTokenInfoRequestValidationError is the validation error returned by
// GetTokenInfoRequest.Validate if the designated constraints aren't met.
type GetTokenInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenInfoRequestValidationError) ErrorName() string {
	return "GetTokenInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenInfoRequestValidationError{}

// Validate checks the field values on GetTokenInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTokenInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenInfoReplyMultiError, or nil if none found.
func (m *GetTokenInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetTokenInfoReplyMultiError(errors)
	}

	return nil
}

// GetTokenInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetTokenInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetTokenInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenInfoReplyMultiError) AllErrors() []error { return m }

// GetTokenInfoReplyValidationError is the validation error returned by
// GetTokenInfoReply.Validate if the designated constraints aren't met.
type GetTokenInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenInfoReplyValidationError) ErrorName() string {
	return "GetTokenInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokenInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenInfoReplyValidationError{}
