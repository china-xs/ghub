// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apidemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApidemoClient is the client API for Apidemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApidemoClient interface {
	ApisignCheckDemo(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error)
	CreateSignDemo(ctx context.Context, in *CreateSignRequest, opts ...grpc.CallOption) (*CreateSignReply, error)
	//生成token
	CreateTokenDemo(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenReply, error)
	//获取登录信息
	GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoReply, error)
}

type apidemoClient struct {
	cc grpc.ClientConnInterface
}

func NewApidemoClient(cc grpc.ClientConnInterface) ApidemoClient {
	return &apidemoClient{cc}
}

func (c *apidemoClient) ApisignCheckDemo(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignReply, error) {
	out := new(SignReply)
	err := c.cc.Invoke(ctx, "/api.v1.apidemo.Apidemo/ApisignCheckDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apidemoClient) CreateSignDemo(ctx context.Context, in *CreateSignRequest, opts ...grpc.CallOption) (*CreateSignReply, error) {
	out := new(CreateSignReply)
	err := c.cc.Invoke(ctx, "/api.v1.apidemo.Apidemo/CreateSignDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apidemoClient) CreateTokenDemo(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenReply, error) {
	out := new(CreateTokenReply)
	err := c.cc.Invoke(ctx, "/api.v1.apidemo.Apidemo/CreateTokenDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apidemoClient) GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoReply, error) {
	out := new(GetTokenInfoReply)
	err := c.cc.Invoke(ctx, "/api.v1.apidemo.Apidemo/GetTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApidemoServer is the server API for Apidemo service.
// All implementations must embed UnimplementedApidemoServer
// for forward compatibility
type ApidemoServer interface {
	ApisignCheckDemo(context.Context, *SignRequest) (*SignReply, error)
	CreateSignDemo(context.Context, *CreateSignRequest) (*CreateSignReply, error)
	//生成token
	CreateTokenDemo(context.Context, *CreateTokenRequest) (*CreateTokenReply, error)
	//获取登录信息
	GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoReply, error)
	mustEmbedUnimplementedApidemoServer()
}

// UnimplementedApidemoServer must be embedded to have forward compatible implementations.
type UnimplementedApidemoServer struct {
}

func (UnimplementedApidemoServer) ApisignCheckDemo(context.Context, *SignRequest) (*SignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApisignCheckDemo not implemented")
}
func (UnimplementedApidemoServer) CreateSignDemo(context.Context, *CreateSignRequest) (*CreateSignReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignDemo not implemented")
}
func (UnimplementedApidemoServer) CreateTokenDemo(context.Context, *CreateTokenRequest) (*CreateTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenDemo not implemented")
}
func (UnimplementedApidemoServer) GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (UnimplementedApidemoServer) mustEmbedUnimplementedApidemoServer() {}

// UnsafeApidemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApidemoServer will
// result in compilation errors.
type UnsafeApidemoServer interface {
	mustEmbedUnimplementedApidemoServer()
}

func RegisterApidemoServer(s grpc.ServiceRegistrar, srv ApidemoServer) {
	s.RegisterService(&Apidemo_ServiceDesc, srv)
}

func _Apidemo_ApisignCheckDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApidemoServer).ApisignCheckDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.apidemo.Apidemo/ApisignCheckDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApidemoServer).ApisignCheckDemo(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apidemo_CreateSignDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApidemoServer).CreateSignDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.apidemo.Apidemo/CreateSignDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApidemoServer).CreateSignDemo(ctx, req.(*CreateSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apidemo_CreateTokenDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApidemoServer).CreateTokenDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.apidemo.Apidemo/CreateTokenDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApidemoServer).CreateTokenDemo(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apidemo_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApidemoServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.apidemo.Apidemo/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApidemoServer).GetTokenInfo(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Apidemo_ServiceDesc is the grpc.ServiceDesc for Apidemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apidemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.apidemo.Apidemo",
	HandlerType: (*ApidemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApisignCheckDemo",
			Handler:    _Apidemo_ApisignCheckDemo_Handler,
		},
		{
			MethodName: "CreateSignDemo",
			Handler:    _Apidemo_CreateSignDemo_Handler,
		},
		{
			MethodName: "CreateTokenDemo",
			Handler:    _Apidemo_CreateTokenDemo_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _Apidemo_GetTokenInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/apidemo/apidemo.proto",
}
