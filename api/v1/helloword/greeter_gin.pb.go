// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:v1.0.1
// protoc-gen-go-gin v1.0.1

package helloword

import (
	gin_tpl "github.com/china-xs/gin-tpl"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// gin.gin_tpl.binding.strings.
type GreeterGinServer interface {
	CreateGreeter(*gin.Context, *CreateGreeterRequest) (*CreateGreeterReply, error)
	DeleteGreeter(*gin.Context, *DeleteGreeterRequest) (*DeleteGreeterReply, error)
	GetGreeter(*gin.Context, *GetGreeterRequest) (*GetGreeterReply, error)
	ListGreeter(*gin.Context, *ListGreeterRequest) (*ListGreeterReply, error)
	UpdateGreeter(*gin.Context, *UpdateGreeterRequest) (*UpdateGreeterReply, error)
}

func RegisterGreeterGinServer(s *gin_tpl.Server, srv GreeterGinServer, ms ...gin.HandlerFunc) {
	route := s.Engine.Use(ms...)
	route.POST("/api/v1/hello", _Greeter_CreateGreeter0_Gin_Handler(s, srv))
	route.PUT("/api/v1/hello", _Greeter_UpdateGreeter0_Gin_Handler(s, srv))
	route.DELETE("/api/v1/hello", _Greeter_DeleteGreeter0_Gin_Handler(s, srv))
	route.GET("/api/v1/hello/:id", _Greeter_GetGreeter0_Gin_Handler(s, srv))
	route.POST("/api/v1/hellos", _Greeter_ListGreeter0_Gin_Handler(s, srv))
	route.GET("/api/v1/hellos", _Greeter_ListGreeter1_Gin_Handler(s, srv))
}

func _Greeter_CreateGreeter0_Gin_Handler(s *gin_tpl.Server, srv GreeterGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in CreateGreeterRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}

		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.helloword.Greeter/CreateGreeter")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.CreateGreeter(c, req.(*CreateGreeterRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}

func _Greeter_UpdateGreeter0_Gin_Handler(s *gin_tpl.Server, srv GreeterGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in UpdateGreeterRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}

		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.helloword.Greeter/UpdateGreeter")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGreeter(c, req.(*UpdateGreeterRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}

func _Greeter_DeleteGreeter0_Gin_Handler(s *gin_tpl.Server, srv GreeterGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in DeleteGreeterRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}

		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.helloword.Greeter/DeleteGreeter")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGreeter(c, req.(*DeleteGreeterRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}

func _Greeter_GetGreeter0_Gin_Handler(s *gin_tpl.Server, srv GreeterGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in GetGreeterRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}

		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		if err := c.ShouldBindUri(&in); err != nil {
			s.Enc(c, nil, err)
			return
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.helloword.Greeter/GetGreeter")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.GetGreeter(c, req.(*GetGreeterRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}

func _Greeter_ListGreeter0_Gin_Handler(s *gin_tpl.Server, srv GreeterGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in ListGreeterRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}

		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.helloword.Greeter/ListGreeter")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.ListGreeter(c, req.(*ListGreeterRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}

func _Greeter_ListGreeter1_Gin_Handler(s *gin_tpl.Server, srv GreeterGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in ListGreeterRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}

		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.helloword.Greeter/ListGreeter")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.ListGreeter(c, req.(*ListGreeterRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}
