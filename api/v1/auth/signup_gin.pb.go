// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:v1.0.1
// protoc-gen-go-gin v1.0.1

package auth

import (
	gin_tpl "github.com/china-xs/gin-tpl"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// gin.gin_tpl.binding.strings.
type SignupGinServer interface {
	UsingEmail(*gin.Context, *UsingEmailRequest) (*UsingEmailReply, error)
	UsingPhone(*gin.Context, *UsingPhoneRequest) (*UsingPhoneReply, error)
}

func RegisterSignupGinServer(s *gin_tpl.Server, srv SignupGinServer) {
	s.Engine.POST("/api/v1/auth/signup/using-email", _Signup_UsingEmail0_Gin_Handler(s, srv))
	s.Engine.POST("/api/v1/auth/signup/using-phone", _Signup_UsingPhone0_Gin_Handler(s, srv))
}

func _Signup_UsingEmail0_Gin_Handler(s *gin_tpl.Server, srv SignupGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in UsingEmailRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}
		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.auth.Signup/UsingEmail")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.UsingEmail(c, req.(*UsingEmailRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}

func _Signup_UsingPhone0_Gin_Handler(s *gin_tpl.Server, srv SignupGinServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in UsingPhoneRequest
		switch c.Request.Method {
		case "POST", "PUT":
			if err := c.ShouldBindBodyWith(&in, binding.JSON); err != nil {
				s.Enc(c, nil, err)
				return
			}
			if strings.Contains(c.Request.URL.String(), "?") {
				if err := c.ShouldBindQuery(&in); err != nil {
					s.Enc(c, nil, err)
					return
				}
			}
		case "GET", "DELETE":
			if err := c.ShouldBindQuery(&in); err != nil {
				s.Enc(c, nil, err)
				return
			}
		}
		c.Set(gin_tpl.OperationKey, "/api.v1.auth.Signup/UsingPhone")
		h := s.Middleware(func(c *gin.Context, req interface{}) (interface{}, error) {
			return srv.UsingPhone(c, req.(*UsingPhoneRequest))
		})
		out, err := h(c, &in)
		s.Enc(c, out, err)
		return
	}
}
