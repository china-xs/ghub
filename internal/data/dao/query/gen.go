// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q          = new(Query)
	Account    *account
	CasbinRule *casbinRule
	Role       *role
	Rule       *rule
	User2role  *user2role
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Account = &Q.Account
	CasbinRule = &Q.CasbinRule
	Role = &Q.Role
	Rule = &Q.Rule
	User2role = &Q.User2role
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Account:    newAccount(db),
		CasbinRule: newCasbinRule(db),
		Role:       newRole(db),
		Rule:       newRule(db),
		User2role:  newUser2role(db),
	}
}

type Query struct {
	db *gorm.DB

	Account    account
	CasbinRule casbinRule
	Role       role
	Rule       rule
	User2role  user2role
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:         db,
		Account:    q.Account.clone(db),
		CasbinRule: q.CasbinRule.clone(db),
		Role:       q.Role.clone(db),
		Rule:       q.Rule.clone(db),
		User2role:  q.User2role.clone(db),
	}
}

type queryCtx struct {
	Account    accountDo
	CasbinRule casbinRuleDo
	Role       roleDo
	Rule       ruleDo
	User2role  user2roleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:    *q.Account.WithContext(ctx),
		CasbinRule: *q.CasbinRule.WithContext(ctx),
		Role:       *q.Role.WithContext(ctx),
		Rule:       *q.Rule.WithContext(ctx),
		User2role:  *q.User2role.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
