// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
package {{PackageName}}

import (
	"context"
    "ghub/internal/data/dao/model"
    "ghub/internal/data/dao/query"
    "github.com/china-xs/gin-tpl/pkg/db"
    "go.uber.org/zap"
    "gorm.io/gen"
    "gorm.io/gen/field"
    "gorm.io/gorm"
)

type Repo struct {
	data *db.Data
	log  *zap.Logger
}

//
// NewRepo
// @Description: 初始化{{ModelName}} Repo
// @param data
// @param log
// @return *Repo
//
func NewRepo(data *db.Data, log *zap.Logger) *Repo {
	return &Repo{
		data: data,
		log:  log,
	}
}

//
// First
// @Description: 单个数据查询
// @receiver repo
// @param ctx
// @param fnc
// @return *model.{{ModelName}}
// @return error
//
func (repo *Repo) First(ctx context.Context, fnc ...func(dao gen.Dao) gen.Dao) (*model.{{ModelName}}, error) {
	return query.{{ModelName}}.WithContext(ctx).Scopes(fnc...).First()
}

//
// Find
// @Description: 多条查询
// @receiver repo
// @param ctx
// @param fnc
// @return []*model.{{ModelName}}
// @return error
//
func (repo Repo) Find(ctx context.Context, fnc ...func(dao gen.Dao) gen.Dao) ([]*model.{{ModelName}}, error) {
	return query.{{ModelName}}.WithContext(ctx).Scopes(fnc...).Find()
}

//
// Create
// @Description: 增删改会涉及事物操作 不可以直接
// @receiver repo
// @param ctx
// @param {{PackageName}}
// @return error
//
func (repo Repo) Create(ctx context.Context, {{PackageName}} *model.{{ModelName}}) error {
	db := repo.data.DB(ctx)
	r := query.Use(db).{{ModelName}}
	return r.WithContext(ctx).Create({{PackageName}})
}

//
// Save
// @Description: 更新
// @receiver repo
// @param ctx
// @param {{PackageName}}
// @param fns
// @return error
//
func (repo *Repo) Save(ctx context.Context, {{PackageName}} *model.{{ModelName}}, fns ...func(gen.Dao) gen.Dao) error {
	db := repo.data.DB(ctx)
	r := query.Use(db).{{ModelName}}
	if len(fns) == 0 {
		return gorm.ErrMissingWhereClause
	}
	return r.WithContext(ctx).Scopes(fns...).Omit(r.ID).Save({{PackageName}})
}

//
// Delete
// @Description:
// @receiver repo
// @param ctx
// @param fnc
// @return error
//
func (repo Repo) Delete(ctx context.Context, fnc ...func(gen.Dao) gen.Dao) error {
	if len(fnc) == 0 {
		return gorm.ErrMissingWhereClause
	}
	db := repo.data.DB(ctx)
	r := query.Use(db).{{ModelName}}
	_, err := r.WithContext(ctx).Scopes(fnc...).Delete()
	return err
}
